package cv.focus.core.infrastructure.persistence.hibernate.impl;

import cv.focus.core.domain.activity.*;
import cv.focus.common.infrastructure.util.string.StringUtil;
import cv.focus.core.interfaces.cisactivity.dto.UserItemDTO;
import cv.focus.core.domain.user.model.Specialization;
import cv.focus.core.domain.user.model.SpecializationRepository;
import cv.focus.core.infrastructure.persistence.hibernate.HibernateRepository;
import org.hibernate.Query;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Administrator on 2016/8/31.
 */
@Repository
public class SpecializationRepositoryHibernateImpl extends HibernateRepository implements SpecializationRepository{

    public void store(Specialization Specialization){
        getSession().saveOrUpdate(Specialization);
    };

    public List<Specialization> findByTutorName(String tutorName){
        Query query = getSession().createQuery("from Specialization where tutorName = :tutorName order by specializationTime");
        query.setParameter("tutorName",tutorName);
        List<Specialization> list = query.list();
        return list;
    };

    public List<Specialization> findByTutorId(Integer tutorId){
        Query query = getSession().createQuery("from Specialization where tutorId = :tutorId order by specializationTime ");
        query.setParameter("tutorId",tutorId);
        List<Specialization> list = query.list();
        return list;
    };

    public List<Specialization> findByUserId(Integer userId){
        Query query = getSession().createQuery("from Specialization where userId = :userId order by specializationTime ");
        query.setParameter("userId",userId);
        List<Specialization> list = query.list();
        return list;
    };

    public List<Specialization> findCurrentListByUserId(Integer userId){
        Query query = getSession().createQuery("from Specialization where userId = :userId and specializationTime < NOW() order by specializationTime ");
        query.setParameter("userId",userId);
        List<Specialization> list = query.list();
        return list;
    };

    public List<Specialization> findHistoryListByUserId(Integer userId){
        Query query = getSession().createQuery("from Specialization where userId = :userId and specializationTime >= NOW() order by specializationTime ");
        query.setParameter("userId",userId);
        List<Specialization> list = query.list();
        return list;
    };

    public List<Specialization> findCurrentListByTutorId(Integer tutorId){
        Query query = getSession().createQuery("from Specialization where tutorId = :tutorId and specializationTime < NOW() order by specializationTime ");
        query.setParameter("tutorId",tutorId);
        List<Specialization> list = query.list();
        return list;
    };

    public List<Specialization> findHistoryListByTutorId(Integer tutorId){
        Query query = getSession().createQuery("from Specialization where tutorId = :tutorId and specializationTime >= NOW() order by specializationTime ");
        query.setParameter("tutorId",tutorId);
        List<Specialization> list = query.list();
        return list;
    };

    public List<Specialization> findAll(){
        Query query = getSession().createQuery("from Specialization order by tutorName,insertTime desc ");
        List<Specialization> list = query.list();
        return list;
    }

    @Override
    public List<ItemEntity> findItemList() {
        //Query query = getSession().createQuery("from ItemEntity where isDisplay=1 order by orderNum");
        Query query = getSession().createQuery("from ItemEntity   order by orderNum");
        List<ItemEntity> list=query.list();
        return list;
    }

    @Override
    public ItemEntity findItemById(Integer itemId) {
        Query query = getSession().createQuery("from ItemEntity where itemId=:itemId");
        query.setInteger("itemId",itemId);
        ItemEntity item =(ItemEntity)query.uniqueResult();
        return item;
    }

    @Override
    public void addPageviews(Integer itemId, Integer afterClickNum) {

        String sql="update ItemEntity set chickNum="+afterClickNum+" where itemId=:itemId";
        Query query = getSession().createQuery(sql);
        query.setParameter("itemId", itemId);
        query.executeUpdate();
    }

    @Override
    public List<ItemEntity> findBannerList() {
        Query query = getSession().createQuery("from ItemEntity where isbanner=1 order by orderNum ");
        List<ItemEntity> list=query.list();
        return list;
    }

    public List<UserItemDTO> findUserItemByUserId(Integer userId){
        String sql = "select  b.itemName,b.itemUrl,a.* from kw_user_item a, kw_item b where a.userId = '"+userId+"' and a.itemId = b.itemId order by createDate desc";
        Query query = getSession().createSQLQuery(sql);
        List list = query.list();
        List<UserItemDTO> list1 = new ArrayList<UserItemDTO>();
        for(int i = 0; i < list.size(); i++){
            Object[] arr = (Object[])list.get(i);
            UserItemDTO userItem = new UserItemDTO(arr[0].toString(),
                    StringUtil.trimNull(arr[1]),
                    StringUtil.trimNull(arr[2]),
                    StringUtil.trimNull(arr[3]),
                    StringUtil.trimNull(arr[4]),
                    StringUtil.trimNull(arr[5]),
                    StringUtil.trimNull(arr[6]),
                    StringUtil.trimNull(arr[7]),
                    StringUtil.trimNull(arr[8]),
                    StringUtil.trimNull(arr[9]),
                    StringUtil.trimNull(arr[10]),
                    StringUtil.trimNull(arr[11]),
                    StringUtil.trimNull(arr[12]));
            list1.add(userItem);
            }
        return list1;
    }

    @Override
    public List<CourseEntity> findCourseByType(String courseType) {
        String sql="from CourseEntity where courseType =:courseType";
        Query query = getSession().createQuery(sql);
        query.setParameter("courseType", courseType);
        List<CourseEntity> list=query.list();
        return list;
    }

    @Override
    public void saveApplyInfo(ApplyActivity applyActivity) {
        getSession().saveOrUpdate(applyActivity);
    }

    @Override
    public void saveApplyActivity(UserApplyActivity userApplyActivity) {
        getSession().saveOrUpdate(userApplyActivity);
    }

    @Override
    public CourseEntity findExamInfoById(String id) {
        Query query = getSession().createQuery("from CourseEntity where id=:id");
        query.setInteger("id",Integer.parseInt(id));
        CourseEntity course =(CourseEntity)query.uniqueResult();
        return course;
    }

    @Override
    public void saveUserScore(UserScore userScore) {
        getSession().saveOrUpdate(userScore);
    }

    @Override
    public ApplyActivity findApplyActivityByUserId(Integer userId) {
        Query query = getSession().createQuery("from ApplyActivity where userId=:userId");
        query.setInteger("userId",userId);
        ApplyActivity applyActivity =(ApplyActivity)query.uniqueResult();
        return applyActivity;
    }

    @Override
    public List<UserApplyActivity> findAllUserApplyActivity(Integer userId) {
        Query query = getSession().createQuery("from UserApplyActivity where userId=:userId");
        query.setInteger("userId",userId);
        List<UserApplyActivity> userApplyActivityList =query.list();
        return userApplyActivityList;
    }

    @Override
    public List<UserScore> findUserScoreByType(Integer userId, String exam_type) {
        Query query = getSession().createQuery("from UserScore where userId=:userId and exam_type=:exam_type");
        query.setInteger("userId",userId);
        query.setParameter("exam_type",exam_type);
        List<UserScore> userScoreList =query.list();
        return userScoreList;
    }

    @Override
    public UserApplyActivity findUserActivityById(String id) {
        Query query = getSession().createQuery("from UserApplyActivity where id=:id");
        query.setInteger("id",Integer.parseInt(id));
        UserApplyActivity userApplyActivity =(UserApplyActivity)query.uniqueResult();
        return userApplyActivity;
    }

    @Override
    public void deleteUserActivity(UserApplyActivity userApplyActivity) {
        getSession().delete(userApplyActivity);
    }

    @Override
    public UserScore findUserScoreById(String id) {
        Query query = getSession().createQuery("from UserScore where id=:id");
        query.setInteger("id",Integer.parseInt(id));
        UserScore userScore =(UserScore)query.uniqueResult();
        return userScore;
    }

    @Override
    public void deleteUserScore(UserScore userScore) {
        getSession().delete(userScore);
    }

    @Override
    public UserApplyActivity findUserActivityByUserId(Integer userId, String activityName) {
        Query query = getSession().createQuery("from UserApplyActivity where userId=:userId and activityName=:activityName");
        query.setInteger("userId",userId);
        query.setParameter("activityName",activityName);
        UserApplyActivity userApplyActivity =(UserApplyActivity)query.uniqueResult();
        return userApplyActivity;
    }

    @Override
    public UserScore findUserScoreByExamId(String examId) {
        Query query = getSession().createQuery("from UserScore where examId=:examId");
        query.setParameter("examId",examId);
        UserScore userScore =(UserScore)query.uniqueResult();
        return userScore;
    }

    @Override
    public void deleteApplyActivity(ApplyActivity existApplyActivity) {
        getSession().delete(existApplyActivity);
    }


}
