package cv.focus.core.interfaces.user.mobile;

import com.focusedu.utils.sms.SmsManager;
import com.focusedu.utils.sms.SmsResult;
import cv.focus.core.domain.school.model.profile.AdmissionProfile;
import cv.focus.core.domain.student.model.profile.StudentProfile;
import cv.focus.core.domain.user.model.User;
import cv.focus.core.infrastructure.util.BaseController;
import cv.focus.core.infrastructure.util.CreateKey;
import cv.focus.core.infrastructure.util.Result;
import cv.focus.core.infrastructure.util.ResultMessages;
import cv.focus.core.interfaces.school.facade.AdmissionProfileServiceFacade;
import cv.focus.core.interfaces.student.facade.StudentProfileServiceFacade;
import cv.focus.core.interfaces.user.dto.UserDTO;
import cv.focus.core.interfaces.user.facade.UserServiceFacade;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.net.URLEncoder;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * UserMobileController
 * 
 * @author liuruichao
 * Created on 2016-06-18 16:55
 */
@Controller
@RequestMapping("/mobile")
public class UserMobileController extends BaseController {
    private final Logger logger = Logger.getLogger(UserMobileController.class);
    @Resource
    private StudentProfileServiceFacade studentProfileServiceFacade;
    @Resource
    private UserServiceFacade userServiceFacade;
    @Resource
    private AdmissionProfileServiceFacade admissionProfileServiceFacade;
    @RequestMapping("/login")
    public String toLogin() {
        return "/mobile/common/login";
    }

    @RequestMapping("/register")
    public String toRegister() {
        return "/mobile/common/register";
    }


    @RequestMapping("/quickLogin")
    public String toQuickLogin() {
        return "/mobile/common/quickLogin";
    }

    @RequestMapping("/login-submit")
    @ResponseBody
    public Result userLogin(
            @RequestParam String loginName,
            @RequestParam String userPwd,
            HttpServletRequest request) {
        Result<String> result = null;
        try {
            if (userServiceFacade.checkLogin(loginName, userPwd)) {
                String mobile = null;
                String email = null;
                if (loginName.contains("@")) {
                    email = loginName;
                } else {
                    email = userServiceFacade.findUserByMobile(loginName).getEmail();
                }
                StudentProfile studentProfile = studentProfileServiceFacade.getProfileByEmail(email);
                AdmissionProfile admissionProfile = admissionProfileServiceFacade.getProfileByEmail(email);
                HttpSession session = request.getSession();
                User user = userServiceFacade.findUserByEmail(email);
                if (studentProfile != null) {
                    setSession(user.getUserId(), mobile, email,user.getRoleR(), studentProfile, session);
                    //登录成功后跳转到主页
                    result = newSuccessResult(ResultMessages.LOGIN_SUCCESS, URLEncoder.encode(studentProfile.getPublicUri(), "UTF-8"));
                }
                if (admissionProfile != null) {
                    setSession(user.getUserId(), loginName, admissionProfile, session);
                    result = newSuccessResult(ResultMessages.LOGIN_SUCCESS, URLEncoder.encode(admissionProfile.getPublicUri(), "UTF-8"));
                }
            } else {
                result = newFaildResult(ResultMessages.LOGIN_FAIL);
            }
        } catch (Exception e) {
            logger.error("UserMobileController.userLogin()", e);
            result = newFaildResult(ResultMessages.SYSTEM_ERROR);
        }
        return result;
    }
    @RequestMapping("/checkMobileAvail")
    @ResponseBody
    public Result<String> checkMobileAvail(@RequestParam String mobile) {
        Result<String> result = null;
        try {
            if (StringUtils.isBlank(mobile)) {
                return newFaildResult(ResultMessages.PARAM_ERROR);
            }
            User user = userServiceFacade.findUserByMobile(mobile);
            if (user == null) {
                result = newFaildResult(ResultMessages.THE_MOBILE_NUMBER_IS_NOT_REGISTERED);
            } else {
                result = newSuccessResult(ResultMessages.OPERATE_SUCCESS, null);
            }
        } catch (Exception e) {
            logger.error("UserController.checkMobileAvail()", e);
            result = newFaildResult(ResultMessages.SYSTEM_ERROR);
        }
        return result;
    }


    @RequestMapping("/sendPhoneVerificationCode")
    @ResponseBody
    public Result<String> sendPhoneVerificationCode(
            @RequestParam String mobile,@RequestParam String flag,HttpServletRequest request) {
        Result<String> result = null;
        try {
            HttpSession session = request.getSession();
            UserDTO userDTO = getLoginUser(request);
            if("".equals(mobile)){
                User user = userServiceFacade.findUserByEmail(userDTO.getEmail());
                mobile=user.getMobile();
            }
            if (!isValidMobile(mobile)) {
                return newFaildResult(ResultMessages.MOBILE_FORMAT_ERROR);
            }
            Date oldDate = (Date) session.getAttribute("sendCodeTime_" + mobile);
            if (oldDate != null) {
                long second = (new Date().getTime() - oldDate.getTime()) / 1000;
                if (second <= 180) {
                    return newFaildResult("Can not continuously send a verification code within three minutes.");
                }
            }
            User user = userServiceFacade.findUserByMobile(mobile);
            if(flag.equals("register")){
                if (user != null) {
                    return newFaildResult(ResultMessages.MOBILE_EXISTS);
                }
            }
            if(flag.equals("quickLogin") || flag.equals("forgetPassword")){
                if (user == null) {
                    return newFaildResult(ResultMessages.THE_MOBILE_NUMBER_IS_NOT_REGISTERED);
                }
            }
            String randomNum = CreateKey.createRandomKey();
            session.setAttribute("sendCodeTime_" + mobile, new Date());
            session.setAttribute("code_" + mobile, randomNum);
            String content = "您的验证码是:" + randomNum + "，最好的出国考试在线学习平台。";
            SmsResult smsResult = SmsManager.sendMessage(mobile, content);
            logger.info("verification code: " + randomNum);
            logger.info("mobile : " + mobile + ", smsResult : " + smsResult.getMsg());
            result = newSuccessResult(ResultMessages.OPERATE_SUCCESS, null);
        } catch (Exception e) {
            logger.error("UserController.sendPhoneVerificationCode()", e);
            result = newFaildResult(ResultMessages.SYSTEM_ERROR);
        }
        return result;
    }

    //重置密码
    @RequestMapping("/resetPassword")
    @ResponseBody
    public Result resetPassword(
            @RequestParam String pwd,
            @RequestParam String mobile,
            @RequestParam String identifyCode,
            HttpServletRequest request) {
        Result result = null;
        try {
            if (StringUtils.isBlank(mobile) || StringUtils.isBlank(pwd)
                    || StringUtils.isBlank(identifyCode)) {
                return newFaildResult(ResultMessages.PARAM_ERROR);
            }
            HttpSession session = request.getSession();
            String vCode = (String) session.getAttribute("code_" + mobile);
            if (StringUtils.isBlank(vCode) || !vCode.equals(identifyCode)) {
                return newFaildResult(ResultMessages.VERIFICATIONCODE_ERROR);
            }
            User user = userServiceFacade.findUserByMobile(mobile);
            if(user !=null){
                userServiceFacade.resetPasswordByMobile(mobile,pwd);
                result = newSuccessResult(ResultMessages.RESET_PASSWORD_SUCCESS, null);
            }else {
                result = newFaildResult(ResultMessages.OPERATE_FAIL);
            }
        } catch (Exception e) {
            logger.error("UserController.resetPassword()", e);
            result = newFaildResult(ResultMessages.SYSTEM_ERROR);
        }
        return result;
    }
    //修改密码
    @RequestMapping("/modifyPasswordSubmit")
    @ResponseBody
    public Result modifyPassword(
            @RequestParam String pwd,
            @RequestParam String pwdn,
            HttpServletRequest request) {
        Result result = null;
        try {
            if (StringUtils.isBlank(pwd) || StringUtils.isBlank(pwdn)) {
                return newFaildResult(ResultMessages.PARAM_ERROR);
            }
            UserDTO userDTO = getLoginUser(request);
            if (userDTO == null) {
                return  newFaildResult(ResultMessages.PARAM_ERROR);
            }
            User user = userServiceFacade.findUserByEmail(userDTO.getEmail());
           if(user!=null){
               final String s = DigestUtils.md5Hex(pwd);
               if(! DigestUtils.md5Hex(pwd).equals(user.getUserPwd())){
                   return  newFaildResult(ResultMessages.THE_PASSWORD_ERROR);
               }
               userServiceFacade.modifyPassword(user,pwdn);
               request.getSession().invalidate();
               return newSuccessResult(ResultMessages.RESET_PASSWORD_SUCCESS,null);
           }
        } catch (Exception e) {
            logger.error("UserController.modifyPassword()", e);
            result = newFaildResult(ResultMessages.SYSTEM_ERROR);
        }
        return result;
    }
    //修改手机号
    @RequestMapping("/modifyMobileNumberSubmit")
    @ResponseBody
    public Result modifyMobileNumber(
            @RequestParam String identifyCode,
            @RequestParam String mobile,
            HttpServletRequest request) {
        Result result = null;
        try {
            UserDTO userDTO = getLoginUser(request);
            User user = userServiceFacade.findUserByEmail(userDTO.getEmail());
            if (StringUtils.isBlank(identifyCode) || StringUtils.isBlank(mobile)) {
                return newFaildResult(ResultMessages.PARAM_ERROR);
            }
            HttpSession session = request.getSession();
            if(user!=null){
                String vCode = (String) session.getAttribute("code_" + user.getMobile());
                if (StringUtils.isBlank(vCode) || !vCode.equals(identifyCode)) {
                    return newFaildResult(ResultMessages.VERIFICATIONCODE_ERROR);
                }
            }
            if (userDTO == null) {
                return  newFaildResult(ResultMessages.PARAM_ERROR);
            }
            if(user!=null){
                userServiceFacade.updateMobile(user,mobile);
                return newSuccessResult(ResultMessages.MODIFY_MOBILE_SUCCESS,null);
            }else {
                //userServiceFacade.modifyPassword(user,pwdn);
                return newFaildResult(ResultMessages.PARAM_ERROR);
            }
        } catch (Exception e) {
            logger.error("UserController.modifyPassword()", e);
            result = newFaildResult(ResultMessages.SYSTEM_ERROR);
        }
        return result;
    }
    @RequestMapping("/followSchool")
    public String followSchool(){
        return "/user/followSchool";
    }
    @RequestMapping("/modifyMobileNumber")
    public String MobileNumber(){
        return "/user/modifyMobileNumber";
    }
    @RequestMapping("/modifyPassword")
    public String Password(){
        return "/user/modifyPassword";
    }
    @RequestMapping("/wechatLogin")
    public String wechatLogin(){
        return "/mobile/common/wechatLogin";
    }
    @RequestMapping("/emailLogin")
    public String emailLogin(){
        return "/mobile/common/emailLogin";
    }

    @RequestMapping("/quickLoginSubmit")
    @ResponseBody
    public Result quickLoginSubmit(
            @RequestParam String mobile,
            @RequestParam String identifyCode,
            HttpServletRequest request){
        Result result = null;
        try {
            if (StringUtils.isBlank(mobile) || StringUtils.isBlank(identifyCode)) {
                return newFaildResult(ResultMessages.PARAM_ERROR);
            }
            HttpSession session = request.getSession();
            String vCode = (String) session.getAttribute("code_" + mobile);
            if (StringUtils.isBlank(vCode) || !vCode.equals(identifyCode)) {
                return newFaildResult(ResultMessages.VERIFICATIONCODE_ERROR);
            }
            User user = userServiceFacade.findUserByMobile(mobile);
            if(user !=null){
                //String mobile = null;
                String email = user.getEmail();
                StudentProfile studentProfile = studentProfileServiceFacade.getProfileByEmail(email);
                AdmissionProfile admissionProfile = admissionProfileServiceFacade.getProfileByEmail(email);
                if (studentProfile != null) {
                    setSession(user.getUserId(), mobile, email,user.getRoleR(), studentProfile, session);
                    //登录成功后跳转到主页
                    result = newSuccessResult(ResultMessages.LOGIN_SUCCESS, URLEncoder.encode(studentProfile.getPublicUri(), "UTF-8"));
                }
                if (admissionProfile != null) {
                    setSession(user.getUserId(), mobile, admissionProfile, session);
                    result = newSuccessResult(ResultMessages.LOGIN_SUCCESS, URLEncoder.encode(admissionProfile.getPublicUri(), "UTF-8"));
                }
                result = newSuccessResult(ResultMessages.RESET_PASSWORD_SUCCESS, null);
            }else {
                result = newFaildResult(ResultMessages.OPERATE_FAIL);
            }
        } catch (Exception e) {
            logger.error("UserMobileController.resetPassword()", e);
            result = newFaildResult(ResultMessages.SYSTEM_ERROR);
        }
        return result;

    }


    private boolean isValidMobile(String mobile) {
        String phonePattern = "^((13[0-9])|(15[^4,\\D])|(18[0,5-9])|(17[0-9]))\\d{8}$";
        Pattern p = Pattern.compile(phonePattern);
        Matcher m = p.matcher(mobile);
        return m.matches();
    }


}
